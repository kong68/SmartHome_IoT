/* mbed Microcontroller Library
 * Copyright (c) 2019 ARM Limited
 * SPDX-License-Identifier: Apache-2.0
 */

#include "mbed.h"
#include "DHT.h"
#include "platform/mbed_thread.h"
#include "rtos.h"
#define BLINKING_RATE_MS   
#include "LiquidCrystal_I2C.h"
Timer timer;  //시간 세기 위해서 필요
#include "Servo.h"//서브모터

AnalogIn ain(A0) ; // 적외선 센서
PwmOut pb(D7);  //부저
PwmOut led1(D2);  //LED1
PwmOut led2(D3);  //LED2
PwmOut led3(D4);  //LED3
PwmOut led4(D5);  //led4
//DHT temp_humi_sensor(A0, DHT11);
Servo blind(D13);                // 서보모터 변수 선언 > 블라인드
AnalogIn cds_sensor(A1);        // 조도센서 변수 선언
DHT temp_humi_sensor(A3, DHT11);
DigitalOut ledR(D8); //난방
DigitalOut ledG(D9); //제습
DigitalOut ledB(D10); //에어컨

int i =0;   //적외선 센서값 변수
int a = 0;  //시간 세는 변수
char check_ch=0;
int blind_flag = 1;  
int sensorErrorResult = 0;

Ticker flipper;
Thread thread;


LiquidCrystal_I2C lcd(0x27,16,2, D14, D15);

Serial pc(SERIAL_TX,SERIAL_RX);



bool check = true; //100Hz로 작동하게 하기 위해 타이머가 돌았는지 확인 하기 위한 변수 

void flip(){
    check = false; // 타이머가 작동했을 시 check를 false로 바꾸어준다
    }

void time_count(){
    timer.start();  //타이머 스타트
    printf("Hello mbed!!\n");
    timer.stop();  //타이머 스탑
    a = timer.read();  //값 읽어오기
    printf("timer read ---> %d\n", a); //확인을 위해 출력
    
    
    }
    
void danger_buzer(){


    if( check == false){ //만약 check가 false 즉, 설정 주기에 맞게 타이머가 작동을 하면
        check = true; //다시 check값을 true로 바꾸어 다음 타이머 작동을 확인 할 수 있게 한다
          
         i = ain.read_u16();
         pc.printf("%d\r\n", i);
         
         
         if (i<10300){  //현관과 가까운 경우
            time_count();
            if (a>3){  // 35초 이상 문앞에 뭔가 있을 경우
                pb.write(0.3f);  
                pb.period_us(100000/262); //경고음 출력
                led4.write(0.3f); //LED 반복해서 점멸
                }

            }
            
        else if (i>=10300){  //현관에서 멀어진 경우
            pb.write(0.0f);  //부저 정지
            timer.reset();  //문앞에서 멀어질 경우 시간 리셋
            led4.write(0.0f); //LED 끔

            }
    
    
        }
    
    }    
    
    
void LED_ON(){
    if( check == false){ //만약 check가 false 즉, 설정 주기에 맞게 타이머가 작동을 하면
        check = true; //다시 check값을 true로 바꾸어 다음 타이머 작동을 확인 할 수 있게 한다
          
         i = ain.read_u16();  //적외선 값 받아오기
         pc.printf("%d\r\n", i);  //확인을 위해 출력
    
        if (i<10000){  //적외선과 가장 가까운곳 ex) 거실

            led1.write(0.0f); //LED꺼짐
            led2.write(0.05f); //LED 살짝 어두움
            led3.write(1.0f); //LED 밝음
            
            if (i<9900){
                led2.write(0.0f); //LED 꺼짐
                
                }
            }
        else if (i>=10000&&i<10300){  // 중간 ex) 복도
            led1.write(0.05f); //LED 살짝 어두움 
            led2.write(1.0f);  //LED 밝음
            led3.write(0.0f);  //LED 꺼짐
            }
        else if (i>10300){   //적외선과 가장 먼곳 ex) 신발장
            led1.write(1.0f); //LED 밝음
            led2.write(0.0f);  //LED 꺼짐
            led3.write(0.0f);  //LED 꺼짐
            }
        }
 
    }
    
void setW(){
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0,0);
    lcd.print("temperture: ");
    lcd.print(temp_humi_sensor.ReadTemperature(CELCIUS));
    lcd.setCursor(0,1);
    lcd.print("humidity: ");
    lcd.print(temp_humi_sensor.ReadHumidity());
    }
    
void setL(){
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0,0);
    lcd.print("Light: ");
    }

void setM(){
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0,0);
    lcd.print("Stock: ");
    lcd.print("value");
    }
    
void setC(){
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0,0);
    lcd.print("Air state: ");
    lcd.setCursor(0,1);
    lcd.print("window state: ");
    }
    
void setD(){
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0,0);
    lcd.print("Press Key: ");
    }

void blind_control() {
        // blind.calibrate(0.0005, 45);        // Default 회전반경
        // blind.calibrate(0.001, 90);       // 서보모터 회전반경 확장
    
    
        //blind.write(0.5f);                        // 블라인드 기본 상태 설정 (닫힘)
     
        //조도센서 밝기 읽어오기
        //pc.printf("cds_sensor value -->> %f \n", cds_sensor.read());    // 시리얼모니터 출력
        //wait(0.2);
        
        if (cds_sensor> 0.5f)          // 1. 주변이 어두우면
        {
            if(blind_flag == 0) {             // 2. 블라인드가 닫혀있으면
                    blind.write(1.0f);      // 블라인드 오픈
                    blind_flag = 1;               // 오픈 상태 저장
            }
        }
        else 
        {                                   // 1. 주변이 밝으면
            if(blind_flag == 1) {                 // 2. 블라인드가 열려 있으면
                    blind.write(0.5f);      // 블라인드 클로즈
                    blind_flag = 0;               // 클로즈 상태 저장
            }
        }
}
    
    
int main()
{
    pc.baud(115200);
    setD();
    led1.period(0.01f);      
    led2.period(0.01f);
    led3.period(0.01f);
    led4.period(1.0f);      // 1 second period
    flipper.attach(&flip,0.01f); //100Hz로 타이머를 설정한다
     // blind.calibrate(0.0005, 45);   // Default 회전반경
    blind.calibrate(0.001, 90);       // 서보모터 회전반경 확장
    
    blind.write(0.5f);      // 블라인드 연결하면 기본 상태 설정 (닫힘 상태로)
    //stoveled = 1;
    //stove_info = 1;
    
    while(1){
        
        danger_buzer();
        LED_ON();
        blind_control(); //준호
        if(pc.readable()){
                check_ch = pc.getc();
                
                 if(check_ch == 'W'){ //W => Weather 날씨관련 입력 받았을 때,
                    setW(); //setW 함수 호출
                    }
                if(check_ch == 'L'){ //L => Light 조도관련 입력 받았을 때,
                    setL(); //setL 함수 호출
                    }
                if(check_ch == 'M'){ //M => Mail 물건관련 입력 받았을 때,
                    setM(); //setM 함수 호출
                    }
                if(check_ch == 'C'){ //C => Controll 컨트롤관련 입력 받았을 때,
                    setC(); //setC 함수 호출
                    }
                if(check_ch == 'D'){ //D => Controll 컨트롤관련 입력 받았을 때,
                    setD(); //setD 함수 호출
                    }
                }
                }
    }


